{"ast":null,"code":"import React from'react';import marketOpenDates from'../resources/marketopenDates.json';var usaTime=Date().toLocaleString(\"en-US\",{timeZone:\"America/New_York\"});var currentMonth=new Date().getMonth()+1;var currentDayOfMonth=new Date().getDate()+1;var currentYear=new Date().getFullYear();var splitTime=usaTime.split(' ');var todaysDate=splitTime[0];var dateArray=[currentMonth,currentDayOfMonth];var dateStrToArr=function dateStrToArr(str){var arr=[];if(typeof str==='string'){str.split('/').forEach(function(elem){return arr.push(Number.parseInt(elem));});}return arr;};var splitHour=splitTime[4].split(\":\").slice(0,2);var thisYearsHolidays=function thisYearsHolidays(){return marketOpenDates.stockMarketHolidays.filter(function(ele){return ele.year===currentYear;});};// console.log(dateStrToArr('05/22'))\n// console.log(todaysDate.slice(0, 5))\n// console.log(dateArray)\n// console.log(currentYear)\n// console.log(thisYearsHolidays())\nvar isMarketOpenFunction={isItAfterHours:function isItAfterHours(){if(Number.parseInt(splitHour[0])>=16&&Number.parseInt(splitHour[0])<=20){return true;}else{return false;}},isItAHoliday:function isItAHoliday(){var newArr=[];Object.values(thisYearsHolidays()[0]).forEach(function(ele){return dateStrToArr(ele)[0]===dateArray[0]&&dateStrToArr(ele)[1]===dateArray[1]?newArr.push(true):false;});return newArr.length>0?true:false;},isItPremarket:function isItPremarket(){if(Number.parseInt(splitHour[0])>=4&&Number.parseInt(splitHour[0])<=9||Number.parseInt(splitHour[0])===9&&Number.parseInt(splitHour[1])<30){return true;}else{return false;}}};export default isMarketOpenFunction;// eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm","map":{"version":3,"sources":["/Users/jasoncruz/Documents/clones/finance-app/src/resources/isMarketOpenFunction.jsx"],"names":["React","marketOpenDates","usaTime","Date","toLocaleString","timeZone","currentMonth","getMonth","currentDayOfMonth","getDate","currentYear","getFullYear","splitTime","split","todaysDate","dateArray","dateStrToArr","str","arr","forEach","elem","push","Number","parseInt","splitHour","slice","thisYearsHolidays","stockMarketHolidays","filter","ele","year","isMarketOpenFunction","isItAfterHours","isItAHoliday","newArr","Object","values","length","isItPremarket"],"mappings":"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","sourcesContent":["import React from 'react'\nimport marketOpenDates from '../resources/marketopenDates.json'\n\nconst usaTime = Date().toLocaleString(\"en-US\", { timeZone: \"America/New_York\" })\nconst currentMonth = new Date().getMonth() + 1\nconst currentDayOfMonth = new Date().getDate() + 1\nconst currentYear = new Date().getFullYear()\nconst splitTime = usaTime.split(' ')\nconst todaysDate = splitTime[0]\nconst dateArray = [currentMonth, currentDayOfMonth]\n\nconst dateStrToArr = (str) => {\n  let arr = []\n  if (typeof str === 'string') {\n    str.split('/').forEach(elem => arr.push(Number.parseInt(elem)))\n  }\n  return arr\n}\n\nconst splitHour = splitTime[4].split(\":\").slice(0, 2)\n\nconst thisYearsHolidays = () => marketOpenDates.stockMarketHolidays.filter(ele => ele.year === currentYear)\n\n// console.log(dateStrToArr('05/22'))\n// console.log(todaysDate.slice(0, 5))\n// console.log(dateArray)\n// console.log(currentYear)\n// console.log(thisYearsHolidays())\n\nconst isMarketOpenFunction = {\n\n\n\n  isItAfterHours: () => {\n    if (Number.parseInt(splitHour[0]) >= 16 && Number.parseInt(splitHour[0]) <= 20) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n  isItAHoliday: () => {\n    let newArr = []\n    Object.values(\n      thisYearsHolidays()[0]).forEach(\n        ele => dateStrToArr(ele)[0] === dateArray[0] && dateStrToArr(ele)[1] === dateArray[1] ? newArr.push(true) : false\n\n      )\n    return newArr.length > 0 ? true : false\n  }\n  ,\n\n\n\n  isItPremarket: () => {\n    if ((Number.parseInt(\n      splitHour[0]) >= 4\n      &&\n      Number.parseInt(splitHour[0]) <= 9)\n      ||\n      (Number.parseInt(splitHour[0]) === 9 && Number.parseInt(splitHour[1]) < 30)) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n\n\n}\n\n\nexport default isMarketOpenFunction\n\n// eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm\n"]},"metadata":{},"sourceType":"module"}