{"ast":null,"code":"import React from 'react';\nimport marketOpenDates from '../resources/marketopenDates.json';\nconst usaTime = Date().toLocaleString(\"en-US\", {\n  timeZone: \"America/New_York\"\n});\nconst currentMonth = new Date().getMonth() + 1;\nconst currentDayOfMonth = new Date().getDate() + 1;\nconst splitTime = usaTime.split(' ');\nconst todaysDate = splitTime[0];\nconst dateArray = [currentMonth, currentDayOfMonth];\nconst usaYear = todaysDate.slice(6, todaysDate.length);\n\nconst dateStrToArr = str => {\n  let arr = [];\n  str.split('/').forEach(ele => arr.push(Number.parseInt(ele)));\n  return arr;\n};\n\nconst splitHour = splitTime[4].split(\":\").slice(0, 2);\n\nconst thisYearsHolidays = () => marketOpenDates.stockMarketHolidays.filter(ele => ele.year.toString() === usaYear);\n\nconsole.log(dateStrToArr('05/22'));\nconsole.log(todaysDate.slice(0, 5));\nconsole.log(dateArray);\nconsole.log(Number.parseInt(splitHour[0]));\nconsole.log(splitTime);\nconst isMarketOpenFunction = {\n  isItAfterHours: () => {\n    if (Number.parseInt(splitHour[0]) >= 16 && Number.parseInt(splitHour[0]) <= 20) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  isItAHoliday: () => thisYearsHolidays().filter(ele => dateStrToArr(ele) === dateArray).length > 0 ? 'its a holiday' : 'not a holday',\n  isItPremarket: () => {\n    if (Number.parseInt(splitHour[0]) >= 4 && Number.parseInt(splitHour[0]) <= 9 && Number.parseInt(splitHour[1]) < 30) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nexport default isMarketOpenFunction; // eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm","map":{"version":3,"sources":["/Users/jasoncruz/Documents/clones/finance-app/src/resources/isMarketOpenFunction.jsx"],"names":["React","marketOpenDates","usaTime","Date","toLocaleString","timeZone","currentMonth","getMonth","currentDayOfMonth","getDate","splitTime","split","todaysDate","dateArray","usaYear","slice","length","dateStrToArr","str","arr","forEach","ele","push","Number","parseInt","splitHour","thisYearsHolidays","stockMarketHolidays","filter","year","toString","console","log","isMarketOpenFunction","isItAfterHours","isItAHoliday","isItPremarket"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AAEA,MAAMC,OAAO,GAAGC,IAAI,GAAGC,cAAP,CAAsB,OAAtB,EAA+B;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAA/B,CAAhB;AACA,MAAMC,YAAY,GAAG,IAAIH,IAAJ,GAAWI,QAAX,KAAwB,CAA7C;AACA,MAAMC,iBAAiB,GAAG,IAAIL,IAAJ,GAAWM,OAAX,KAAuB,CAAjD;AACA,MAAMC,SAAS,GAAGR,OAAO,CAACS,KAAR,CAAc,GAAd,CAAlB;AACA,MAAMC,UAAU,GAAGF,SAAS,CAAC,CAAD,CAA5B;AACA,MAAMG,SAAS,GAAG,CAACP,YAAD,EAAeE,iBAAf,CAAlB;AACA,MAAMM,OAAO,GAAGF,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoBH,UAAU,CAACI,MAA/B,CAAhB;;AAEA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,MAAIC,GAAG,GAAG,EAAV;AACAD,EAAAA,GAAG,CAACP,KAAJ,CAAU,GAAV,EAAeS,OAAf,CAAuBC,GAAG,IAAIF,GAAG,CAACG,IAAJ,CAASC,MAAM,CAACC,QAAP,CAAgBH,GAAhB,CAAT,CAA9B;AACA,SAAOF,GAAP;AACD,CAJD;;AAMA,MAAMM,SAAS,GAAGf,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAb,CAAmB,GAAnB,EAAwBI,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,CAAlB;;AAEA,MAAMW,iBAAiB,GAAG,MAAMzB,eAAe,CAAC0B,mBAAhB,CAAoCC,MAApC,CAA2CP,GAAG,IAAIA,GAAG,CAACQ,IAAJ,CAASC,QAAT,OAAwBhB,OAA1E,CAAhC;;AAEAiB,OAAO,CAACC,GAAR,CAAYf,YAAY,CAAC,OAAD,CAAxB;AACAc,OAAO,CAACC,GAAR,CAAYpB,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAZ;AACAgB,OAAO,CAACC,GAAR,CAAYnB,SAAZ;AACAkB,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,CAAZ;AACAM,OAAO,CAACC,GAAR,CAAYtB,SAAZ;AAEA,MAAMuB,oBAAoB,GAAG;AAI3BC,EAAAA,cAAc,EAAE,MAAM;AACpB,QAAIX,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,KAAiC,EAAjC,IAAuCF,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,KAAiC,EAA5E,EAAgF;AAC9E,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAV0B;AAc3BU,EAAAA,YAAY,EAAE,MACZT,iBAAiB,GAAGE,MAApB,CAA2BP,GAAG,IAAIJ,YAAY,CAACI,GAAD,CAAZ,KAAsBR,SAAxD,EAAmEG,MAAnE,GAA4E,CAA5E,GAAgF,eAAhF,GAAkG,cAfzE;AAoB3BoB,EAAAA,aAAa,EAAE,MAAM;AACnB,QAAIb,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,KAAiC,CAAjC,IAAsCF,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,KAAiC,CAAvE,IAA4EF,MAAM,CAACC,QAAP,CAAgBC,SAAS,CAAC,CAAD,CAAzB,IAAgC,EAAhH,EAAoH;AAClH,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF;AA1B0B,CAA7B;AAmCA,eAAeQ,oBAAf,C,CAEA;AACA;AACA","sourcesContent":["import React from 'react'\nimport marketOpenDates from '../resources/marketopenDates.json'\n\nconst usaTime = Date().toLocaleString(\"en-US\", { timeZone: \"America/New_York\" })\nconst currentMonth = new Date().getMonth() + 1\nconst currentDayOfMonth = new Date().getDate() + 1\nconst splitTime = usaTime.split(' ')\nconst todaysDate = splitTime[0]\nconst dateArray = [currentMonth, currentDayOfMonth]\nconst usaYear = todaysDate.slice(6, todaysDate.length)\n\nconst dateStrToArr = (str) => {\n  let arr = []\n  str.split('/').forEach(ele => arr.push(Number.parseInt(ele)))\n  return arr\n}\n\nconst splitHour = splitTime[4].split(\":\").slice(0, 2)\n\nconst thisYearsHolidays = () => marketOpenDates.stockMarketHolidays.filter(ele => ele.year.toString() === usaYear)\n\nconsole.log(dateStrToArr('05/22'))\nconsole.log(todaysDate.slice(0, 5))\nconsole.log(dateArray)\nconsole.log(Number.parseInt(splitHour[0]))\nconsole.log(splitTime)\n\nconst isMarketOpenFunction = {\n\n\n\n  isItAfterHours: () => {\n    if (Number.parseInt(splitHour[0]) >= 16 && Number.parseInt(splitHour[0]) <= 20) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n  isItAHoliday: () =>\n    thisYearsHolidays().filter(ele => dateStrToArr(ele) === dateArray).length > 0 ? 'its a holiday' : 'not a holday'\n  ,\n\n\n\n  isItPremarket: () => {\n    if (Number.parseInt(splitHour[0]) >= 4 && Number.parseInt(splitHour[0]) <= 9 && Number.parseInt(splitHour[1]) < 30) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n\n\n}\n\n\nexport default isMarketOpenFunction\n\n// eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm\n"]},"metadata":{},"sourceType":"module"}