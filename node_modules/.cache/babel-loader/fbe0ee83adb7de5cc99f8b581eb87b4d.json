{"ast":null,"code":"import React from 'react';\nimport marketOpenDates from '../resources/marketopenDates.json';\nconst usaTime = Date().toLocaleString(\"en-US\", {\n  timeZone: \"America/New_York\"\n});\nconst newDate = Date();\nconst splitTime = usaTime.split(' ');\nconst todaysDate = splitTime[0];\nconst usaYear = todaysDate.slice(6, todaysDate.length);\nconst splitHour = splitTime[4].split(\":\").slice(0, 2);\n\nconst thisYearsHolidays = () => marketOpenDates.stockMarketHolidays.filter(ele => ele.year.toString() === usaYear);\n\nconsole.log(usaTime.getMonth());\nconsole.log(todaysDate);\nconsole.log(usaTime);\nconsole.log(Number.parseInt(splitHour[0]));\nconsole.log(splitTime);\nconst isMarketOpenFunction = {\n  isItAfterHours: () => {\n    if (Number.parseInt(splitHour[0]) >= 16 && Number.parseInt(splitHour[0]) <= 20) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  isItAHoliday: () => thisYearsHolidays().filter(ele => ele === todaysDate.slice(0, 5)).length > 0 ? 'its a holiday' : 'not a holday',\n  isItPremarket: () => {\n    if (Number.parseInt(splitHour[0]) >= 4 && Number.parseInt(splitHour[0]) <= 9 && Number.parseInt(splitHour[1]) < 30) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nexport default isMarketOpenFunction; // eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm","map":{"version":3,"sources":["/Users/jasoncruz/Documents/clones/finance-app/src/resources/isMarketOpenFunction.jsx"],"names":["React","marketOpenDates","usaTime","Date","toLocaleString","timeZone","newDate","splitTime","split","todaysDate","usaYear","slice","length","splitHour","thisYearsHolidays","stockMarketHolidays","filter","ele","year","toString","console","log","getMonth","Number","parseInt","isMarketOpenFunction","isItAfterHours","isItAHoliday","isItPremarket"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AAEA,MAAMC,OAAO,GAAGC,IAAI,GAAGC,cAAP,CAAsB,OAAtB,EAA+B;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAA/B,CAAhB;AACA,MAAMC,OAAO,GAAGH,IAAI,EAApB;AACA,MAAMI,SAAS,GAAGL,OAAO,CAACM,KAAR,CAAc,GAAd,CAAlB;AACA,MAAMC,UAAU,GAAGF,SAAS,CAAC,CAAD,CAA5B;AAEA,MAAMG,OAAO,GAAGD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBF,UAAU,CAACG,MAA/B,CAAhB;AAIA,MAAMC,SAAS,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAb,CAAmB,GAAnB,EAAwBG,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,CAAlB;;AAEA,MAAMG,iBAAiB,GAAG,MAAMb,eAAe,CAACc,mBAAhB,CAAoCC,MAApC,CAA2CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,QAAT,OAAwBT,OAA1E,CAAhC;;AAEAU,OAAO,CAACC,GAAR,CAAYnB,OAAO,CAACoB,QAAR,EAAZ;AACAF,OAAO,CAACC,GAAR,CAAYZ,UAAZ;AACAW,OAAO,CAACC,GAAR,CAAYnB,OAAZ;AACAkB,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,CAAZ;AACAO,OAAO,CAACC,GAAR,CAAYd,SAAZ;AAEA,MAAMkB,oBAAoB,GAAG;AAI3BC,EAAAA,cAAc,EAAE,MAAM;AACpB,QAAIH,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,KAAiC,EAAjC,IAAuCU,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,KAAiC,EAA5E,EAAgF;AAC9E,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAV0B;AAc3Bc,EAAAA,YAAY,EAAE,MAAMb,iBAAiB,GAAGE,MAApB,CAA2BC,GAAG,IAAIA,GAAG,KAAKR,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAA1C,EAAkEC,MAAlE,GAA2E,CAA3E,GAA+E,eAA/E,GAAiG,cAd1F;AAkB3BgB,EAAAA,aAAa,EAAE,MAAM;AACnB,QAAIL,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,KAAiC,CAAjC,IAAsCU,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,KAAiC,CAAvE,IAA4EU,MAAM,CAACC,QAAP,CAAgBX,SAAS,CAAC,CAAD,CAAzB,IAAgC,EAAhH,EAAoH;AAClH,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF;AAxB0B,CAA7B;AAiCA,eAAeY,oBAAf,C,CAEA;AACA;AACA","sourcesContent":["import React from 'react'\nimport marketOpenDates from '../resources/marketopenDates.json'\n\nconst usaTime = Date().toLocaleString(\"en-US\", { timeZone: \"America/New_York\" })\nconst newDate = Date()\nconst splitTime = usaTime.split(' ')\nconst todaysDate = splitTime[0]\n\nconst usaYear = todaysDate.slice(6, todaysDate.length)\n\n\n\nconst splitHour = splitTime[4].split(\":\").slice(0, 2)\n\nconst thisYearsHolidays = () => marketOpenDates.stockMarketHolidays.filter(ele => ele.year.toString() === usaYear)\n\nconsole.log(usaTime.getMonth())\nconsole.log(todaysDate)\nconsole.log(usaTime)\nconsole.log(Number.parseInt(splitHour[0]))\nconsole.log(splitTime)\n\nconst isMarketOpenFunction = {\n\n\n\n  isItAfterHours: () => {\n    if (Number.parseInt(splitHour[0]) >= 16 && Number.parseInt(splitHour[0]) <= 20) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n  isItAHoliday: () => thisYearsHolidays().filter(ele => ele === todaysDate.slice(0, 5)).length > 0 ? 'its a holiday' : 'not a holday',\n\n\n\n  isItPremarket: () => {\n    if (Number.parseInt(splitHour[0]) >= 4 && Number.parseInt(splitHour[0]) <= 9 && Number.parseInt(splitHour[1]) < 30) {\n      return true\n    } else {\n      return false\n    }\n  },\n\n\n\n\n\n}\n\n\nexport default isMarketOpenFunction\n\n// eastern time\n// premarket is 4am to 9:30am\n// afterhours is 4pm to 8pm\n"]},"metadata":{},"sourceType":"module"}